#include "compileheader.h"

#include "zipreader.h"
#include "QFile"
#include <qdebug.h>
bool ZipReader::LoadZip(const char * zipname)
{
    if(!QFile::exists(zipname)){return false;}
    archive = ZipFile::Open(zipname);
    CurrentFile=nullptr;
    return true;

}
bool ZipReader::LoadFile(const char * filename)
{

    if(!archive)return false;
    CurrentFile = archive->GetEntry(filename);
    if(nullptr==CurrentFile)return false;
    return true;
}
std::istream *ZipReader::GetStream(){
    if(!archive)return nullptr;
    if(!CurrentFile)return nullptr;
    return CurrentFile->GetDecompressionStream();
}
size_t ZipReader::GetSize(){
    if(!archive)return 0;
    if(!CurrentFile)return 0;
    return CurrentFile->GetSize();
}
void ZipReader::getMIMEtype(char **type){
    if(!archive)*type=nullptr;
    if(!CurrentFile)*type=nullptr;
    std::string comment=CurrentFile->GetComment();
    if(comment.size()!=0){
        //Use the comment as MIME-type
        *type=reinterpret_cast<char*>(malloc(comment.size()+1));
        memset(*type,0,comment.size()+1);
        memcpy(*type,comment.c_str(),comment.size());
    }else{
        //Automatically detect
        std::string str=CurrentFile->GetName();
        unsigned long long offset=str.find_last_of('.');
        std::string output;
        str.replace(0,offset,"");
        std::map<std::string,std::string>::iterator iter=Ext.find(str);
        if(iter==Ext.end())output="application/octet-stream";
        output=iter->second;
        *type=reinterpret_cast<char*>(malloc(output.size()+1));
        memset(*type,0,output.size()+1);
        memcpy(*type,output.c_str(),output.size());
    }
}
std::map<std::string,std::string> ZipReader::Ext;
void ZipReader::InitMap(){
    Ext.insert(std::pair<std::string,std::string>(".tif","image/tiff"));
    Ext.insert(std::pair<std::string,std::string>(".001","application/x-001"));
    Ext.insert(std::pair<std::string,std::string>(".301","application/x-301"));
    Ext.insert(std::pair<std::string,std::string>(".323","text/h323"));
    Ext.insert(std::pair<std::string,std::string>(".906","application/x-906"));
    Ext.insert(std::pair<std::string,std::string>(".907","drawing/907"));
    Ext.insert(std::pair<std::string,std::string>(".a11","application/x-a11"));
    Ext.insert(std::pair<std::string,std::string>(".acp","audio/x-mei-aac"));
    Ext.insert(std::pair<std::string,std::string>(".ai","application/postscript"));
    Ext.insert(std::pair<std::string,std::string>(".aif","audio/aiff"));
    Ext.insert(std::pair<std::string,std::string>(".aifc","audio/aiff"));
    Ext.insert(std::pair<std::string,std::string>(".aiff","audio/aiff"));
    Ext.insert(std::pair<std::string,std::string>(".anv","application/x-anv"));
    Ext.insert(std::pair<std::string,std::string>(".asa","text/asa"));
    Ext.insert(std::pair<std::string,std::string>(".asf","video/x-ms-asf"));
    Ext.insert(std::pair<std::string,std::string>(".asp","text/asp"));
    Ext.insert(std::pair<std::string,std::string>(".asx","video/x-ms-asf"));
    Ext.insert(std::pair<std::string,std::string>(".au","audio/basic"));
    Ext.insert(std::pair<std::string,std::string>(".avi","video/avi"));
    Ext.insert(std::pair<std::string,std::string>(".awf","application/vnd.adobe.workflow"));
    Ext.insert(std::pair<std::string,std::string>(".biz","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".bmp","application/x-bmp"));
    Ext.insert(std::pair<std::string,std::string>(".bot","application/x-bot"));
    Ext.insert(std::pair<std::string,std::string>(".c4t","application/x-c4t"));
    Ext.insert(std::pair<std::string,std::string>(".c90","application/x-c90"));
    Ext.insert(std::pair<std::string,std::string>(".cal","application/x-cals"));
    Ext.insert(std::pair<std::string,std::string>(".cat","application/vnd.ms-pki.seccat"));
    Ext.insert(std::pair<std::string,std::string>(".cdf","application/x-netcdf"));
    Ext.insert(std::pair<std::string,std::string>(".cdr","application/x-cdr"));
    Ext.insert(std::pair<std::string,std::string>(".cel","application/x-cel"));
    Ext.insert(std::pair<std::string,std::string>(".cer","application/x-x509-ca-cert"));
    Ext.insert(std::pair<std::string,std::string>(".cg4","application/x-g4"));
    Ext.insert(std::pair<std::string,std::string>(".cgm","application/x-cgm"));
    Ext.insert(std::pair<std::string,std::string>(".cit","application/x-cit"));
    Ext.insert(std::pair<std::string,std::string>(".class","java/*"));
    Ext.insert(std::pair<std::string,std::string>(".cml","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".cmp","application/x-cmp"));
    Ext.insert(std::pair<std::string,std::string>(".cmx","application/x-cmx"));
    Ext.insert(std::pair<std::string,std::string>(".cot","application/x-cot"));
    Ext.insert(std::pair<std::string,std::string>(".crl","application/pkix-crl"));
    Ext.insert(std::pair<std::string,std::string>(".crt","application/x-x509-ca-cert"));
    Ext.insert(std::pair<std::string,std::string>(".csi","application/x-csi"));
    Ext.insert(std::pair<std::string,std::string>(".css","text/css"));
    Ext.insert(std::pair<std::string,std::string>(".cut","application/x-cut"));
    Ext.insert(std::pair<std::string,std::string>(".dbf","application/x-dbf"));
    Ext.insert(std::pair<std::string,std::string>(".dbm","application/x-dbm"));
    Ext.insert(std::pair<std::string,std::string>(".dbx","application/x-dbx"));
    Ext.insert(std::pair<std::string,std::string>(".dcd","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".dcx","application/x-dcx"));
    Ext.insert(std::pair<std::string,std::string>(".der","application/x-x509-ca-cert"));
    Ext.insert(std::pair<std::string,std::string>(".dgn","application/x-dgn"));
    Ext.insert(std::pair<std::string,std::string>(".dib","application/x-dib"));
    Ext.insert(std::pair<std::string,std::string>(".dll","application/x-msdownload"));
    Ext.insert(std::pair<std::string,std::string>(".doc","application/msword"));
    Ext.insert(std::pair<std::string,std::string>(".dot","application/msword"));
    Ext.insert(std::pair<std::string,std::string>(".drw","application/x-drw"));
    Ext.insert(std::pair<std::string,std::string>(".dtd","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".dwf","Model/vnd.dwf"));
    Ext.insert(std::pair<std::string,std::string>(".dwf","application/x-dwf"));
    Ext.insert(std::pair<std::string,std::string>(".dwg","application/x-dwg"));
    Ext.insert(std::pair<std::string,std::string>(".dxb","application/x-dxb"));
    Ext.insert(std::pair<std::string,std::string>(".dxf","application/x-dxf"));
    Ext.insert(std::pair<std::string,std::string>(".edn","application/vnd.adobe.edn"));
    Ext.insert(std::pair<std::string,std::string>(".emf","application/x-emf"));
    Ext.insert(std::pair<std::string,std::string>(".eml","message/rfc822"));
    Ext.insert(std::pair<std::string,std::string>(".ent","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".epi","application/x-epi"));
    Ext.insert(std::pair<std::string,std::string>(".eps","application/x-ps"));
    Ext.insert(std::pair<std::string,std::string>(".eps","application/postscript"));
    Ext.insert(std::pair<std::string,std::string>(".etd","application/x-ebx"));
    Ext.insert(std::pair<std::string,std::string>(".exe","application/x-msdownload"));
    Ext.insert(std::pair<std::string,std::string>(".fax","image/fax"));
    Ext.insert(std::pair<std::string,std::string>(".fdf","application/vnd.fdf"));
    Ext.insert(std::pair<std::string,std::string>(".fif","application/fractals"));
    Ext.insert(std::pair<std::string,std::string>(".fo","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".frm","application/x-frm"));
    Ext.insert(std::pair<std::string,std::string>(".g4","application/x-g4"));
    Ext.insert(std::pair<std::string,std::string>(".gbr","application/x-gbr"));
    Ext.insert(std::pair<std::string,std::string>(".","application/x-"));
    Ext.insert(std::pair<std::string,std::string>(".gif","image/gif"));
    Ext.insert(std::pair<std::string,std::string>(".gl2","application/x-gl2"));
    Ext.insert(std::pair<std::string,std::string>(".gp4","application/x-gp4"));
    Ext.insert(std::pair<std::string,std::string>(".hgl","application/x-hgl"));
    Ext.insert(std::pair<std::string,std::string>(".hmr","application/x-hmr"));
    Ext.insert(std::pair<std::string,std::string>(".hpg","application/x-hpgl"));
    Ext.insert(std::pair<std::string,std::string>(".hpl","application/x-hpl"));
    Ext.insert(std::pair<std::string,std::string>(".hqx","application/mac-binhex40"));
    Ext.insert(std::pair<std::string,std::string>(".hrf","application/x-hrf"));
    Ext.insert(std::pair<std::string,std::string>(".hta","application/hta"));
    Ext.insert(std::pair<std::string,std::string>(".htc","text/x-component"));
    Ext.insert(std::pair<std::string,std::string>(".htm","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".html","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".htt","text/webviewhtml"));
    Ext.insert(std::pair<std::string,std::string>(".htx","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".icb","application/x-icb"));
    Ext.insert(std::pair<std::string,std::string>(".ico","image/x-icon"));
    Ext.insert(std::pair<std::string,std::string>(".ico","application/x-ico"));
    Ext.insert(std::pair<std::string,std::string>(".iff","application/x-iff"));
    Ext.insert(std::pair<std::string,std::string>(".ig4","application/x-g4"));
    Ext.insert(std::pair<std::string,std::string>(".igs","application/x-igs"));
    Ext.insert(std::pair<std::string,std::string>(".iii","application/x-iphone"));
    Ext.insert(std::pair<std::string,std::string>(".img","application/x-img"));
    Ext.insert(std::pair<std::string,std::string>(".ins","application/x-internet-signup"));
    Ext.insert(std::pair<std::string,std::string>(".isp","application/x-internet-signup"));
    Ext.insert(std::pair<std::string,std::string>(".IVF","video/x-ivf"));
    Ext.insert(std::pair<std::string,std::string>(".java","java/*"));
    Ext.insert(std::pair<std::string,std::string>(".jfif","image/jpeg"));
    Ext.insert(std::pair<std::string,std::string>(".jpe","image/jpeg"));
    Ext.insert(std::pair<std::string,std::string>(".jpe","application/x-jpe"));
    Ext.insert(std::pair<std::string,std::string>(".jpeg","image/jpeg"));
    Ext.insert(std::pair<std::string,std::string>(".jpg","image/jpeg"));
    Ext.insert(std::pair<std::string,std::string>(".jpg","application/x-jpg"));
    Ext.insert(std::pair<std::string,std::string>(".js","application/x-javascript"));
    Ext.insert(std::pair<std::string,std::string>(".jsp","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".la1","audio/x-liquid-file"));
    Ext.insert(std::pair<std::string,std::string>(".lar","application/x-laplayer-reg"));
    Ext.insert(std::pair<std::string,std::string>(".latex","application/x-latex"));
    Ext.insert(std::pair<std::string,std::string>(".lavs","audio/x-liquid-secure"));
    Ext.insert(std::pair<std::string,std::string>(".lbm","application/x-lbm"));
    Ext.insert(std::pair<std::string,std::string>(".lmsff","audio/x-la-lms"));
    Ext.insert(std::pair<std::string,std::string>(".ls","application/x-javascript"));
    Ext.insert(std::pair<std::string,std::string>(".ltr","application/x-ltr"));
    Ext.insert(std::pair<std::string,std::string>(".m1v","video/x-mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".m2v","video/x-mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".m3u","audio/mpegurl"));
    Ext.insert(std::pair<std::string,std::string>(".m4e","video/mpeg4"));
    Ext.insert(std::pair<std::string,std::string>(".mac","application/x-mac"));
    Ext.insert(std::pair<std::string,std::string>(".man","application/x-troff-man"));
    Ext.insert(std::pair<std::string,std::string>(".math","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".mdb","application/msaccess"));
    Ext.insert(std::pair<std::string,std::string>(".mdb","application/x-mdb"));
    Ext.insert(std::pair<std::string,std::string>(".mfp","application/x-shockwave-flash"));
    Ext.insert(std::pair<std::string,std::string>(".mht","message/rfc822"));
    Ext.insert(std::pair<std::string,std::string>(".mhtml","message/rfc822"));
    Ext.insert(std::pair<std::string,std::string>(".mi","application/x-mi"));
    Ext.insert(std::pair<std::string,std::string>(".mid","audio/mid"));
    Ext.insert(std::pair<std::string,std::string>(".midi","audio/mid"));
    Ext.insert(std::pair<std::string,std::string>(".mil","application/x-mil"));
    Ext.insert(std::pair<std::string,std::string>(".mml","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".mnd","audio/x-musicnet-download"));
    Ext.insert(std::pair<std::string,std::string>(".mns","audio/x-musicnet-stream"));
    Ext.insert(std::pair<std::string,std::string>(".mocha","application/x-javascript"));
    Ext.insert(std::pair<std::string,std::string>(".movie","video/x-sgi-movie"));
    Ext.insert(std::pair<std::string,std::string>(".mp1","audio/mp1"));
    Ext.insert(std::pair<std::string,std::string>(".mp2","audio/mp2"));
    Ext.insert(std::pair<std::string,std::string>(".mp2v","video/mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".mp3","audio/mp3"));
    Ext.insert(std::pair<std::string,std::string>(".mp4","video/mpeg4"));
    Ext.insert(std::pair<std::string,std::string>(".mpa","video/x-mpg"));
    Ext.insert(std::pair<std::string,std::string>(".mpd","application/vnd.ms-project"));
    Ext.insert(std::pair<std::string,std::string>(".mpe","video/x-mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".mpeg","video/mpg"));
    Ext.insert(std::pair<std::string,std::string>(".mpg","video/mpg"));
    Ext.insert(std::pair<std::string,std::string>(".mpga","audio/rn-mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".mpp","application/vnd.ms-project"));
    Ext.insert(std::pair<std::string,std::string>(".mps","video/x-mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".mpt","application/vnd.ms-project"));
    Ext.insert(std::pair<std::string,std::string>(".mpv","video/mpg"));
    Ext.insert(std::pair<std::string,std::string>(".mpv2","video/mpeg"));
    Ext.insert(std::pair<std::string,std::string>(".mpw","application/vnd.ms-project"));
    Ext.insert(std::pair<std::string,std::string>(".mpx","application/vnd.ms-project"));
    Ext.insert(std::pair<std::string,std::string>(".mtx","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".mxp","application/x-mmxp"));
    Ext.insert(std::pair<std::string,std::string>(".net","image/pnetvue"));
    Ext.insert(std::pair<std::string,std::string>(".nrf","application/x-nrf"));
    Ext.insert(std::pair<std::string,std::string>(".nws","message/rfc822"));
    Ext.insert(std::pair<std::string,std::string>(".odc","text/x-ms-odc"));
    Ext.insert(std::pair<std::string,std::string>(".out","application/x-out"));
    Ext.insert(std::pair<std::string,std::string>(".p10","application/pkcs10"));
    Ext.insert(std::pair<std::string,std::string>(".p12","application/x-pkcs12"));
    Ext.insert(std::pair<std::string,std::string>(".p7b","application/x-pkcs7-certificates"));
    Ext.insert(std::pair<std::string,std::string>(".p7c","application/pkcs7-mime"));
    Ext.insert(std::pair<std::string,std::string>(".p7m","application/pkcs7-mime"));
    Ext.insert(std::pair<std::string,std::string>(".p7r","application/x-pkcs7-certreqresp"));
    Ext.insert(std::pair<std::string,std::string>(".p7s","application/pkcs7-signature"));
    Ext.insert(std::pair<std::string,std::string>(".pc5","application/x-pc5"));
    Ext.insert(std::pair<std::string,std::string>(".pci","application/x-pci"));
    Ext.insert(std::pair<std::string,std::string>(".pcl","application/x-pcl"));
    Ext.insert(std::pair<std::string,std::string>(".pcx","application/x-pcx"));
    Ext.insert(std::pair<std::string,std::string>(".pdf","application/pdf"));
    Ext.insert(std::pair<std::string,std::string>(".pdf","application/pdf"));
    Ext.insert(std::pair<std::string,std::string>(".pdx","application/vnd.adobe.pdx"));
    Ext.insert(std::pair<std::string,std::string>(".pfx","application/x-pkcs12"));
    Ext.insert(std::pair<std::string,std::string>(".pgl","application/x-pgl"));
    Ext.insert(std::pair<std::string,std::string>(".pic","application/x-pic"));
    Ext.insert(std::pair<std::string,std::string>(".pko","application/vnd.ms-pki.pko"));
    Ext.insert(std::pair<std::string,std::string>(".pl","application/x-perl"));
    Ext.insert(std::pair<std::string,std::string>(".plg","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".pls","audio/scpls"));
    Ext.insert(std::pair<std::string,std::string>(".plt","application/x-plt"));
    Ext.insert(std::pair<std::string,std::string>(".png","image/png"));
    Ext.insert(std::pair<std::string,std::string>(".png","application/x-png"));
    Ext.insert(std::pair<std::string,std::string>(".pot","application/vnd.ms-powerpoint"));
    Ext.insert(std::pair<std::string,std::string>(".ppa","application/vnd.ms-powerpoint"));
    Ext.insert(std::pair<std::string,std::string>(".ppm","application/x-ppm"));
    Ext.insert(std::pair<std::string,std::string>(".pps","application/vnd.ms-powerpoint"));
    Ext.insert(std::pair<std::string,std::string>(".ppt","application/vnd.ms-powerpoint"));
    Ext.insert(std::pair<std::string,std::string>(".ppt","application/x-ppt"));
    Ext.insert(std::pair<std::string,std::string>(".pr","application/x-pr"));
    Ext.insert(std::pair<std::string,std::string>(".prf","application/pics-rules"));
    Ext.insert(std::pair<std::string,std::string>(".prn","application/x-prn"));
    Ext.insert(std::pair<std::string,std::string>(".prt","application/x-prt"));
    Ext.insert(std::pair<std::string,std::string>(".ps","application/x-ps"));
    Ext.insert(std::pair<std::string,std::string>(".ps","application/postscript"));
    Ext.insert(std::pair<std::string,std::string>(".ptn","application/x-ptn"));
    Ext.insert(std::pair<std::string,std::string>(".pwz","application/vnd.ms-powerpoint"));
    Ext.insert(std::pair<std::string,std::string>(".r3t","text/vnd.rn-realtext3d"));
    Ext.insert(std::pair<std::string,std::string>(".ra","audio/vnd.rn-realaudio"));
    Ext.insert(std::pair<std::string,std::string>(".ram","audio/x-pn-realaudio"));
    Ext.insert(std::pair<std::string,std::string>(".ras","application/x-ras"));
    Ext.insert(std::pair<std::string,std::string>(".rat","application/rat-file"));
    Ext.insert(std::pair<std::string,std::string>(".rdf","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".rec","application/vnd.rn-recording"));
    Ext.insert(std::pair<std::string,std::string>(".red","application/x-red"));
    Ext.insert(std::pair<std::string,std::string>(".rgb","application/x-rgb"));
    Ext.insert(std::pair<std::string,std::string>(".rjs","application/vnd.rn-realsystem-rjs"));
    Ext.insert(std::pair<std::string,std::string>(".rjt","application/vnd.rn-realsystem-rjt"));
    Ext.insert(std::pair<std::string,std::string>(".rlc","application/x-rlc"));
    Ext.insert(std::pair<std::string,std::string>(".rle","application/x-rle"));
    Ext.insert(std::pair<std::string,std::string>(".rm","application/vnd.rn-realmedia"));
    Ext.insert(std::pair<std::string,std::string>(".rmf","application/vnd.adobe.rmf"));
    Ext.insert(std::pair<std::string,std::string>(".rmi","audio/mid"));
    Ext.insert(std::pair<std::string,std::string>(".rmj","application/vnd.rn-realsystem-rmj"));
    Ext.insert(std::pair<std::string,std::string>(".rmm","audio/x-pn-realaudio"));
    Ext.insert(std::pair<std::string,std::string>(".rmp","application/vnd.rn-rn_music_package"));
    Ext.insert(std::pair<std::string,std::string>(".rms","application/vnd.rn-realmedia-secure"));
    Ext.insert(std::pair<std::string,std::string>(".rmvb","application/vnd.rn-realmedia-vbr"));
    Ext.insert(std::pair<std::string,std::string>(".rmx","application/vnd.rn-realsystem-rmx"));
    Ext.insert(std::pair<std::string,std::string>(".rnx","application/vnd.rn-realplayer"));
    Ext.insert(std::pair<std::string,std::string>(".rp","image/vnd.rn-realpix"));
    Ext.insert(std::pair<std::string,std::string>(".rpm","audio/x-pn-realaudio-plugin"));
    Ext.insert(std::pair<std::string,std::string>(".rsml","application/vnd.rn-rsml"));
    Ext.insert(std::pair<std::string,std::string>(".rt","text/vnd.rn-realtext"));
    Ext.insert(std::pair<std::string,std::string>(".rtf","application/msword"));
    Ext.insert(std::pair<std::string,std::string>(".rtf","application/x-rtf"));
    Ext.insert(std::pair<std::string,std::string>(".rv","video/vnd.rn-realvideo"));
    Ext.insert(std::pair<std::string,std::string>(".sam","application/x-sam"));
    Ext.insert(std::pair<std::string,std::string>(".sat","application/x-sat"));
    Ext.insert(std::pair<std::string,std::string>(".sdp","application/sdp"));
    Ext.insert(std::pair<std::string,std::string>(".sdw","application/x-sdw"));
    Ext.insert(std::pair<std::string,std::string>(".sit","application/x-stuffit"));
    Ext.insert(std::pair<std::string,std::string>(".slb","application/x-slb"));
    Ext.insert(std::pair<std::string,std::string>(".sld","application/x-sld"));
    Ext.insert(std::pair<std::string,std::string>(".slk","drawing/x-slk"));
    Ext.insert(std::pair<std::string,std::string>(".smi","application/smil"));
    Ext.insert(std::pair<std::string,std::string>(".smil","application/smil"));
    Ext.insert(std::pair<std::string,std::string>(".smk","application/x-smk"));
    Ext.insert(std::pair<std::string,std::string>(".snd","audio/basic"));
    Ext.insert(std::pair<std::string,std::string>(".sol","text/plain"));
    Ext.insert(std::pair<std::string,std::string>(".sor","text/plain"));
    Ext.insert(std::pair<std::string,std::string>(".spc","application/x-pkcs7-certificates"));
    Ext.insert(std::pair<std::string,std::string>(".spl","application/futuresplash"));
    Ext.insert(std::pair<std::string,std::string>(".spp","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".ssm","application/streamingmedia"));
    Ext.insert(std::pair<std::string,std::string>(".sst","application/vnd.ms-pki.certstore"));
    Ext.insert(std::pair<std::string,std::string>(".stl","application/vnd.ms-pki.stl"));
    Ext.insert(std::pair<std::string,std::string>(".stm","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".sty","application/x-sty"));
    Ext.insert(std::pair<std::string,std::string>(".svg","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".swf","application/x-shockwave-flash"));
    Ext.insert(std::pair<std::string,std::string>(".tdf","application/x-tdf"));
    Ext.insert(std::pair<std::string,std::string>(".tg4","application/x-tg4"));
    Ext.insert(std::pair<std::string,std::string>(".tga","application/x-tga"));
    Ext.insert(std::pair<std::string,std::string>(".tif","image/tiff"));
    Ext.insert(std::pair<std::string,std::string>(".tif","application/x-tif"));
    Ext.insert(std::pair<std::string,std::string>(".tiff","image/tiff"));
    Ext.insert(std::pair<std::string,std::string>(".tld","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".top","drawing/x-top"));
    Ext.insert(std::pair<std::string,std::string>(".torrent","application/x-bittorrent"));
    Ext.insert(std::pair<std::string,std::string>(".tsd","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".txt","text/plain"));
    Ext.insert(std::pair<std::string,std::string>(".uin","application/x-icq"));
    Ext.insert(std::pair<std::string,std::string>(".uls","text/iuls"));
    Ext.insert(std::pair<std::string,std::string>(".vcf","text/x-vcard"));
    Ext.insert(std::pair<std::string,std::string>(".vda","application/x-vda"));
    Ext.insert(std::pair<std::string,std::string>(".vdx","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vml","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".vpg","application/x-vpeg005"));
    Ext.insert(std::pair<std::string,std::string>(".vsd","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vsd","application/x-vsd"));
    Ext.insert(std::pair<std::string,std::string>(".vss","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vst","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vst","application/x-vst"));
    Ext.insert(std::pair<std::string,std::string>(".vsw","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vsx","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vtx","application/vnd.visio"));
    Ext.insert(std::pair<std::string,std::string>(".vxml","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".wav","audio/wav"));
    Ext.insert(std::pair<std::string,std::string>(".wax","audio/x-ms-wax"));
    Ext.insert(std::pair<std::string,std::string>(".wb1","application/x-wb1"));
    Ext.insert(std::pair<std::string,std::string>(".wb2","application/x-wb2"));
    Ext.insert(std::pair<std::string,std::string>(".wb3","application/x-wb3"));
    Ext.insert(std::pair<std::string,std::string>(".wbmp","image/vnd.wap.wbmp"));
    Ext.insert(std::pair<std::string,std::string>(".wiz","application/msword"));
    Ext.insert(std::pair<std::string,std::string>(".wk3","application/x-wk3"));
    Ext.insert(std::pair<std::string,std::string>(".wk4","application/x-wk4"));
    Ext.insert(std::pair<std::string,std::string>(".wkq","application/x-wkq"));
    Ext.insert(std::pair<std::string,std::string>(".wks","application/x-wks"));
    Ext.insert(std::pair<std::string,std::string>(".wm","video/x-ms-wm"));
    Ext.insert(std::pair<std::string,std::string>(".wma","audio/x-ms-wma"));
    Ext.insert(std::pair<std::string,std::string>(".wmd","application/x-ms-wmd"));
    Ext.insert(std::pair<std::string,std::string>(".wmf","application/x-wmf"));
    Ext.insert(std::pair<std::string,std::string>(".wml","text/vnd.wap.wml"));
    Ext.insert(std::pair<std::string,std::string>(".wmv","video/x-ms-wmv"));
    Ext.insert(std::pair<std::string,std::string>(".wmx","video/x-ms-wmx"));
    Ext.insert(std::pair<std::string,std::string>(".wmz","application/x-ms-wmz"));
    Ext.insert(std::pair<std::string,std::string>(".wp6","application/x-wp6"));
    Ext.insert(std::pair<std::string,std::string>(".wpd","application/x-wpd"));
    Ext.insert(std::pair<std::string,std::string>(".wpg","application/x-wpg"));
    Ext.insert(std::pair<std::string,std::string>(".wpl","application/vnd.ms-wpl"));
    Ext.insert(std::pair<std::string,std::string>(".wq1","application/x-wq1"));
    Ext.insert(std::pair<std::string,std::string>(".wr1","application/x-wr1"));
    Ext.insert(std::pair<std::string,std::string>(".wri","application/x-wri"));
    Ext.insert(std::pair<std::string,std::string>(".wrk","application/x-wrk"));
    Ext.insert(std::pair<std::string,std::string>(".ws","application/x-ws"));
    Ext.insert(std::pair<std::string,std::string>(".ws2","application/x-ws"));
    Ext.insert(std::pair<std::string,std::string>(".wsc","text/scriptlet"));
    Ext.insert(std::pair<std::string,std::string>(".wsdl","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".wvx","video/x-ms-wvx"));
    Ext.insert(std::pair<std::string,std::string>(".xdp","application/vnd.adobe.xdp"));
    Ext.insert(std::pair<std::string,std::string>(".xdr","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xfd","application/vnd.adobe.xfd"));
    Ext.insert(std::pair<std::string,std::string>(".xfdf","application/vnd.adobe.xfdf"));
    Ext.insert(std::pair<std::string,std::string>(".xhtml","text/html"));
    Ext.insert(std::pair<std::string,std::string>(".xls","application/vnd.ms-excel"));
    Ext.insert(std::pair<std::string,std::string>(".xls","application/x-xls"));
    Ext.insert(std::pair<std::string,std::string>(".xlw","application/x-xlw"));
    Ext.insert(std::pair<std::string,std::string>(".xml","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xpl","audio/scpls"));
    Ext.insert(std::pair<std::string,std::string>(".xq","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xql","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xquery","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xsd","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xsl","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xslt","text/xml"));
    Ext.insert(std::pair<std::string,std::string>(".xwd","application/x-xwd"));
    Ext.insert(std::pair<std::string,std::string>(".x_b","application/x-x_b"));
    Ext.insert(std::pair<std::string,std::string>(".sis","application/vnd.symbian.install"));
    Ext.insert(std::pair<std::string,std::string>(".sisx","application/vnd.symbian.install"));
    Ext.insert(std::pair<std::string,std::string>(".x_t","application/x-x_t"));
    Ext.insert(std::pair<std::string,std::string>(".ipa","application/vnd.iphone"));
    Ext.insert(std::pair<std::string,std::string>(".apk","application/vnd.android.package-archive"));
    Ext.insert(std::pair<std::string,std::string>(".xap","application/x-silverlight-app"));
}
